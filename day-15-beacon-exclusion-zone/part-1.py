input_items = open('./example-input.txt').read().split('\n')
# input_items = open('./input.txt').read().split('\n')

print(input_items)


"""

Come back and do this later ... I don't have the mind space for it now.

It looks like ... if you know a Sensor's closest Beacon - you can assume the "square" area around it is empty of beacons.

That might be - any COORD that has MANHATTAN_DISTANCE < the distance of the Beacon.

RIGHT???

S0... the answer might be:
- Parse - set up grid
- For each Sensor - find the closest Beacon - and Mark all of the # (area that cannot be a beacon)
    - The trick here is likely a recursive func to find the "manhattan area" - all of the paths starting from S
- Then, just count the #'s in a given row, that is the answer

               1    1    2    2
     0    5    0    5    0    5
-2 ..........#.................
-1 .........###................
 0 ....S...#####...............
 1 .......#######........S.....
 2 ......#########S............
 3 .....###########SB..........
 4 ....#############...........
 5 ...###############..........
 6 ..#################.........
 7 .#########S#######S#........
 8 ..#################.........
 9 ...###############..........
10 ....B############...........
11 ..S..###########............
12 ......#########.............
13 .......#######..............
14 ........#####.S.......S.....
15 B........###................
16 ..........#SB...............
17 ................S..........B
18 ....S.......................
19 ............................
20 ............S......S........
21 ............................
22 .......................B....




"""